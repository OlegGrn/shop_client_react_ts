import React from 'react';
import styled from "styled-components";
import MyCopyField from "../components/ui/MyCopyField";


const About = () => {
    return (
        <Section>
            <H1>Описание проекта</H1>
            <p>Привет!<br/>
                На этой странице небольшое описание по данному проекту.
            </p>
            <div>
                <p><b>Фронтенд:</b> React, Mobx, TypeScript, Axios, JWT, CSS с использованием Styled Components</p>
                <p><b>Бэкенд:</b> Express, Sequelize</p>
                <p><b>База данных </b>на облачном сайте Neon Serverless Postgres <b>https://neon.tech/</b></p>
            </div>
            <H2>Установка</H2>
            <p>Предполагается что на компьютере установлен node.js и gitHub.</p>
            <p>Скачиваем на компьютер клиентскую и серверную часть по указанным ссылкам.</p>
            <div>

                <H3>Ссылки на скачивания репозитариев:</H3>

                <GridLink>
                    <p>Клиент:</p>
                    <MyCopyField value={"https://github.com/OlegGrn/shop_client_react_ts.git"}/>
                    <p>Сервер:</p>
                    <MyCopyField value={"https://github.com/OlegGrn/shop_server_express.git"}/>
                </GridLink>
                <GridLink>
                    <p>Из любого терминала командной строки, находясь в скаченных паках, вводим
                        поочерёдно команду<br/></p>
                    <MyCopyField value={"npm install"}/>
                    <p>И ожидаем установки.</p>
                    <p>Далее, находясь в папке с клиентской частью приложения, для запуска вводим
                        команду</p>
                    <MyCopyField value={"npm start"}/>
                    <p>Из папки с серверной частью, для её запуска вводим команду</p>
                    <MyCopyField value={"npm run dev"}/>

                </GridLink>
            </div>
            <H2>Вступление</H2>
            <div>Приложение масштабируемое, при желании можно добавить функционал и страницы.<br/>
                Приложение адаптивно до ширины экрана <b>320px.</b><br/>
                Store на Mobx, Http запросы через Axios, авторизация посредством JWT.
            </div>
            <div>
                <p>Запросы на сервер осуществляются через два файла в паке <b>src/http/http_services:</b></p>
                <Ul>
                    <Li><b>ProductServices.ts</b> (для запросов по созданию/удалению/получению продуктов)</Li>
                    <Li><b>basicHttpService.ts</b> (для всех остальных)</Li>
                </Ul>
                <p>Взаимодействуют с ними только файлы <b>...Store.ts</b> из папки <b>src/store</b>. Сами компоненты уже
                    взаимодействуют со своими <b>..Store.ts.</b></p>
            </div>
            <div>
                Переменные компонентов фронтенда находятся в <b>src/utils/consts.ts</b> <br/>
                Переменные бэкенда в файле <b>.env</b><br/>
                Переменные стилей в <b>src/styles/theme.ts</b><br/>
                Глобальные стили в <b>src/styles/global.ts</b><br/>
            </div>
            <H2>Фронтенд:</H2>
            <div>Вкладка <b>"Магазин"</b> доступна всем. Переход в корзину только зарегистрированным пользователям. При
                клике
                по иконке <b>"Корзина"</b>, незарегистрированному пользователю будет предложено зарегистрироваться.
                Иконка
                <b>"Настроек"</b> (панель администратора) появится в баре меню в правой части, если вход был от
                администратора.
            </div>

            <div>
                <H3>На странице магазина можно:</H3>
                <Ul>
                    <Li>выбирать типы/категории/размеры выводимых товаров</Li>
                    <Li>выбирать как показывать товары (плитка/список)</Li>
                    <Li>выбирать по сколько показывать товары (переменные вывода – опции выбора и значение по умолчанию,
                        находятся в <b>src/utils/consts.ts</b>)</Li>
                    <Li>сброс фильтров</Li>
                    <Li>постраничная навигация</Li>
                    <Li>подгрузить ещё товаров</Li>
                </Ul>
            </div>

            <div>
                <H3>На странице товара можно:</H3>
                <Ul>
                    <Li>выбирать размер/количество и добавлять товар в корзину. При этом вводимое количество
                        учитывается с учетом доступности в базе данных на сервере и с учетом уже добавленных ранее
                        пользователем товаров в корзину. Если максимальное количество уже в корзине - кнопка добавления
                        изменить своё значение и станет не активной</Li>
                    <Li>просматривать фотографии к товару (слайдер Swiper, настройки в компоненте <b>src/components/SwiperBlock.tsx</b>)</Li>
                </Ul>
            </div>

            <div>
                <H3>На странице с корзиной товара можно:</H3>
                <Ul>
                    <Li>изменять уже ранее введенное количество товара</Li>
                    <Li>удалять помещённый ранее в корзину товар</Li>
                </Ul>
                <p>Функционал оплаты пока не реализован</p>
            </div>
            <div>
                В приложении реализована <b>панель администратора</b>, где можно добавлять/удалять товары, типы,
                категории,
                размеры, администраторов.<br/>
                Вводимые данные на клиенте валидирутся регулярными выражениями (<b>src/utils/regularExp.ts</b>). Сильно
                их не
                усложнял, для удобства тестирования. Не валидные поля будут подсвечены.<br/>
                Все модальные окна можно закрыть с клавиатуры клавишей Esc.<br/>
                На разрешении экрана ниже <b>768px</b> в панели администратора можно будет только удалять/добавлять
                администраторов
            </div>
            <div>
                <H3>Функционал панели администратора:</H3>
                <Ul>
                    <Li><b>Администратор (добавить/удалить)</b>
                        <p>Администраторов можно добавить только из уже зарегистрированных в базе пользователей. Пароль
                            пользователя при этом остается прежним, указанным при регистрации, и хранится на сервере в
                            хешированном виде. При удалении администраторов, проверяется их количество, последнего
                            удалить будет
                            нельзя.</p>
                    </Li>
                    <Li><b>Типы / Категории / Размер (добавить/удалить)</b>
                        <p>Здесь вводятся данные, из которых потом можно будет выбирать при создании нового товара
                            (продукта). При их удалении из базы типов/категорий/размеров проверяется база товаров. Если
                            какой-либо товар их использует, параметр не удалится, база выдаст предупреждение, что они
                            используются товарами.
                        </p>
                    </Li>
                    <Li><b>Продукт (добавить/удалить)</b>
                        <p>При добавлении товара типы/категории/размеры выбираются из установленных ранее.<br/>
                            Создавая товар, можно загружать фотографии форматом <b>JPG</b>, которые сохранятся в
                            серверной
                            части приложения в папке <b>src/static/(..id товара)</b>. В базе данных сохранятся их
                            названия
                            (названия будут новыми уникальными).<br/>
                            Количество фотографий для загрузки регулируется переменной <b>QUANTITY_FOTO_LOADING
                                (src/utils/consts.ts)</b> .<br/>
                            Одинаковые введенные размеры в разные поля, в последствии суммируются, пустые поля
                            удаляются.<br/>
                            Если при создании фото не загружалась, подтянется дефолтная фотография
                            <b> (scr/foto/sale.jpg)</b></p>
                    </Li>
                </Ul>
            </div>
            <H2>Бэкэнд:</H2>
            <p>Переменные окружения в файле <b>.env</b></p>
            <div>
                <H3>Структура папок:</H3>
                <Ul>
                    <Li><b>index.js</b> - основной файл</Li>
                    <Li><b>models</b> - файл создания моделей таблиц в базе данных</Li>
                    <Li><b>routers</b> - файлы маршрутов andPoints и соответствующие им контроллеры</Li>
                    <Li><b>controllers</b> - файлы с описанием логики контроллеров</Li>
                    <Li><b>services</b> – функции, вызываемые соответствующими контроллерами</Li>
                    <Li><b>utils</b> - вспомогательные функции для сервисов</Li>
                    <Li><b>errors</b> - midlWeare для обработки ошибок</Li>
                    <Li><b>static</b> - хранит изображения (формат <b>jpg</b>) создаваемых товаров</Li>
                </Ul>
            </div>
            <div></div>

        </Section>

    );
};

export default About;

const Section = styled.section`
  display: grid;
  gap: 1.5em;
`
const H1 = styled.h1`
  font-size: 1.7em;
  font-weight: bold;
`
const H2 = styled.h2`
  font-size: 1.4em;
  font-weight: bold;;
`
const H3 = styled.h3`
  font-size: 1.2em;
  font-weight: bold;;
`
const Ul = styled.ul`
  padding: 0.3em;
`
const Li = styled.li`
  list-style: square inside;
  line-height: 1.2em;
`
const GridLink = styled.div`
  padding: 0.8em 0;
  display: grid;
  align-items: center;
  grid-template-columns: 1fr;
  gap: 0.5em;
`

